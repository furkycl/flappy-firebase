rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isValidName(n) {
      return n is string && n.matches(".*\\S.*") && n.size() <= 40;
    }
    function isValidScore(s) {
      return s is number && s >= 3 && s <= 5000 && s == int(s);
    }
    // 10 saniyede bir kayıt (kullanıcı başına)
    function canSubmit(uid) {
      let userDoc = get(/databases/$(database)/documents/users/$(uid));
      return !(userDoc.exists()) || !(userDoc.data.lastScoreTs is timestamp) ||
             (request.time - userDoc.data.lastScoreTs > duration.value(10, 's'));
    }

    match /scores/{id} {
      allow read: if true;
      allow create: if request.auth != null
        && request.resource.data.uid == request.auth.uid
        && isValidName(request.resource.data.name)
        && isValidScore(request.resource.data.score)
        && request.resource.data.ts is timestamp
        && canSubmit(request.auth.uid);
      allow update, delete: if false;
    }

    match /users/{uid} {
      allow read: if request.auth != null && request.auth.uid == uid;
      allow create, update: if request.auth != null && request.auth.uid == uid
        && request.resource.data.lastScoreTs is timestamp;
      allow delete: if false;
    }
  }
}
